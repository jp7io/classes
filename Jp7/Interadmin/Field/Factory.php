<?php

namespace Jp7\Interadmin\Field;

class Factory
{
    protected $namespace = 'Jp7\\Interadmin\\Field\\';
    /*
    protected $map = [
        'text' => [],
        'varchar' => [],
        'char' => [],
        'file' => [],
        'date' => [],
        'select' => [],
        'select_multi' => [],
        'special' => [],
        'tit' => [],
        'func' => []
    ];
    */
    /**
     * @param array[] $campos As generated by InterAdminTipo->getCampos()
     * @return FieldInterface[]
     */
    public function makeFromCampos(array $campos)
    {
        return array_map([$this, 'makeField'], $campos);
    }
    
    /**
     * @param array $campo As generated by InterAdminTipo->getCampos()
     * @return FieldInterface
     */
    public function makeField(array $campo)
    {
		// tipo_de_campo -> only used in a few specials / xtra_disabledfields
        $prefix = $this->getPrefix($campo['tipo_de_campo'] ? $campo['tipo_de_campo'].'_' : $campo['tipo']);
        if ($prefix === 'select') {
            if (in_array($campo['xtra'], [SelectField::XTRA_RECORD_AJAX, SelectField::XTRA_TYPE_AJAX])) {
                $prefix .= '_ajax';
            } elseif (in_array($campo['xtra'], [SelectField::XTRA_RECORD_RADIO, SelectField::XTRA_TYPE_RADIO])) {
                $prefix .= '_radio';
            }
        } elseif ($prefix === 'select_multi') {
            if ($campo['xtra'] === SelectMultiField::XTRA_RECORD_SEARCH) {
                $prefix .= '_ajax';
            }
        } elseif ($prefix === 'special' || $prefix === 'func') {
            // Special as object
            // Special as callable should be deprecated in favor of object
            if (str_contains($campo['nome'], '\\')) {
                $className = $campo['nome'];
                return new $className($campo);
            }
        }
        $className = $this->namespace.studly_case($prefix).'Field';
        return new $className($campo);
    }
    
    /**
     * @param string
     */
    protected function getPrefix($tipoDeCampo)
    {
        assert(is_string($tipoDeCampo));
        $tipoParts = explode('_', $tipoDeCampo);
        array_pop($tipoParts);
        return implode('_', $tipoParts);
    }
}

/*
public static function getSelectTipoXtras()
{
    return ['S', 'ajax_tipos', 'radio_tipos'];
 * 
 * multi => S
 * 
 * 
 * Retorna os xtra dos campos do tipo special_ que armazenam tipos.
 *
 * @return array

public static function getSpecialTipoXtras()
{
    return ['tipos_multi', 'tipos'];
}
/**
 * Retorna os xtra dos campos do tipo special_ que armazenam m√∫ltiplos registros.
 *
 * @return array
public static function getSpecialMultiXtras()
{
    return ['registros_multi', 'tipos_multi'];
}
*/